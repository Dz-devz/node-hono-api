// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int      @id @default(autoincrement()) // Primary Key
  email     String   @unique
  name      String
  createdAt DateTime @default(now())

  // Relations
  UserChats UserChat[]
  Messages  Message[]
  Chat      Chat[]
}

model UserChat {
  user_id   Int
  chat_id   Int
  group_id  Int?
  role      Role     @default(member)
  joined_at DateTime @default(now())

  User User @relation(fields: [user_id], references: [user_id])
  Chat Chat @relation(fields: [chat_id], references: [chat_id])

  @@id([user_id, chat_id])
}

model Chat {
  chat_id   Int      @id @default(autoincrement())
  group_id  Int?
  sent_by   Int?
  message   String?
  chat_type ChatType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserChats UserChat[]
  ChatGroup GroupChat? @relation(fields: [group_id], references: [group_id])
  Messages  Message[]
  User      User?      @relation(fields: [sent_by], references: [user_id])
}

model GroupChat {
  group_id   Int      @id @default(autoincrement())
  group_name String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  chats Chat[]
}

model Message {
  message_id     Int      @id @default(autoincrement())
  chat_id        Int
  sender_id      Int
  messageContent String
  createdAt      DateTime @default(now())

  Chat Chat @relation(fields: [chat_id], references: [chat_id])
  User User @relation(fields: [sender_id], references: [user_id])
}

enum ChatType {
  direct
  group
}

enum Role {
  admin
  member
}
